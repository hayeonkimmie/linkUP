<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="mapper.review">
    <insert id="insertReview" parameterType="Map">
        update review
        set star = #{star},
            comment = #{comment},
            create_date = curdate()
        where review_id = #{reviewId}
    </insert>
    <update id="updateReview" parameterType="Map">
        update review
        set star = #{star},
            comment = #{comment}
        where review_id = #{reviewId} and w_user_id = #{wUserId}
    </update>
    <select id="selectReceiveReviewByFreelancerId" parameterType="Map" resultType="review">
        select r.*, CONCAT('(',u.name, ') ', c.company_name) as wUserInfo, u.profile_img as wUserProfileImg, p.project_name
        from review r
            join user u on r.w_user_id = u.user_id
            join project p on r.project_id = p.project_id
            join client c on c.client_id = u.user_id
        where r_user_id = #{freelancerId} and comment is not null
        order by create_date desc, review_id desc
        limit #{row}, 10
    </select>
    <select id="selectWrittenReviewByFreelancerId" parameterType="Map" resultType="review">
        SELECT
            r.*,
            CONCAT('(',u.name, ') ', c.company_name) AS rUserInfo,
            u.profile_img AS rUserProfileImg,
            p.project_name
        FROM review r
                 JOIN user u ON r.r_user_id = u.user_id
                 JOIN project p ON r.project_id = p.project_id
                 JOIN client c ON c.client_id = u.user_id
        WHERE r.w_user_id = #{freelancerId} and comment is not null
        ORDER BY r.create_date DESC, r.review_id DESC
        limit #{row}, 10
    </select>
    <select id="selectUnWrittenReviewByFreelancerId" parameterType="Map" resultType="review">
        select r.*, CONCAT('(',u.name, ') ', c.company_name) as rUserInfo, u.profile_img as rUserProfileImg, p.project_name
        from review r
                 join user u on r.r_user_id = u.user_id
                 join project p on r.project_id = p.project_id
                 join client c on c.client_id = u.user_id
        where w_user_id = #{freelancerId} and comment is null
        order by review_id desc
        limit #{row}, 10
    </select>
    <select id="selectUnWrittenReviewsCnt" parameterType="String" resultType="Integer">
        select count(*)
        from review
        where w_user_id = #{userId} and comment is null
    </select>
    <select id="selectWrittenReviewsCnt" parameterType="String" resultType="Integer">
        select count(*)
        from review
        where w_user_id = #{userId} and comment is not null
    </select>
    <select id="selectReceivedReviewCnt" parameterType="String" resultType="Integer">
        select count(*)
        from review
        where r_user_id = #{userId} and comment is not null
    </select>
    <update id="deleteReviewByReviewId" parameterType="Integer">
        delete from review where review_id = #{reviewId}
    </update>
    <select id="isReviewWriter" parameterType="Map"  resultType="Integer">
        select count(*) from review
        where review_id = #{reviewId} and w_user_id = #{freelancerId}
    </select>
</mapper>
